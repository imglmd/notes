package com.kiryha.noting.presentation.viewmodel

import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.kiryha.noting.data.repository.NoteRepository
import com.kiryha.noting.domain.model.Note
import com.kiryha.noting.domain.model.NoteListItem
import com.kiryha.noting.domain.status.NoteStatus
import com.kiryha.noting.domain.status.ResultWithStatus
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.SharingStarted
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.flow.asStateFlow
import kotlinx.coroutines.flow.combine
import kotlinx.coroutines.flow.stateIn
import kotlinx.coroutines.launch
import java.text.SimpleDateFormat
import java.util.*

class NoteViewModel(private val repository: NoteRepository) : ViewModel() {

    private val _searchText = MutableStateFlow("")
    val searchText: StateFlow<String> = _searchText.asStateFlow()

    private val _notes = MutableStateFlow<ResultWithStatus<List<Note>>>(
        ResultWithStatus(
            emptyList(),
            NoteStatus.Success
        )
    )
    val groupedNotes: StateFlow<ResultWithStatus<List<NoteListItem>>> = searchText.combine(_notes) { text, result ->
        val filteredNotes = if (text.isBlank()){
            result.item
        } else {
            result.item.filter { it.doesMatchSearchQuery(text) }
        }
        val groupedItems = groupNotesByMonth(filteredNotes)
        ResultWithStatus(
            item = groupedItems,
            status = result.status
        )
    }.stateIn(
        viewModelScope,
        SharingStarted.WhileSubscribed(5000),
        ResultWithStatus(emptyList(), NoteStatus.Success)
    )

    private val _isSearching = MutableStateFlow(false)
    val isSearching: StateFlow<Boolean> = _isSearching.asStateFlow()

    private val _status = MutableStateFlow<NoteStatus>(NoteStatus.Success)
    val status: StateFlow<NoteStatus> get() = _status.asStateFlow()

    private val _selectedNote = MutableStateFlow<ResultWithStatus<Note>>(
        ResultWithStatus(
            Note(id = -1, text = "", date = ""),
            NoteStatus.Success
        )
    )
    val selectedNote: StateFlow<ResultWithStatus<Note>> get() = _selectedNote.asStateFlow()

    init {
        loadNotes()
    }

    fun onSearchTextChange(text: String) {
        _searchText.value = text
        _isSearching.value = text.isNotBlank()
    }

    fun loadNotes() {
        viewModelScope.launch {
            val result = repository.getNotes()
            _notes.value = result
            _status.value = result.status
        }
    }

    fun getNote(id: Int) {
        viewModelScope.launch {
            val result = repository.getNote(id)
            _selectedNote.value = result
            _status.value = result.status
        }
    }

    fun upsertNote(note: Note) {
        viewModelScope.launch {
            val result = repository.upsertNote(note)
            if (result.status == NoteStatus.Success) {
                loadNotes()
            }
            _status.value = result.status
        }
    }

    fun deleteNote(id: Int) {
        viewModelScope.launch {
            val result = repository.deleteNote(id)
            if (result.status == NoteStatus.Deleted) {
                loadNotes()
            }
            _status.value = result.status
        }
    }

    private fun groupNotesByMonth(notes: List<Note>): List<NoteListItem> {
        if (notes.isEmpty()) return emptyList()

        val dateFormat = SimpleDateFormat("yyyy-MM-dd", Locale.getDefault())
        val monthYearFormat = SimpleDateFormat("yyyy-MM", Locale.getDefault())
        val monthDisplayFormat = SimpleDateFormat("LLLL", Locale("en"))

        val sortedNotes = notes.sortedByDescending {
            try {
                dateFormat.parse(it.date)?.time ?: 0
            } catch (e: Exception) {
                0L
            }
        }

        val groupedMap = sortedNotes.groupBy { note ->
            try {
                val date = dateFormat.parse(note.date)
                monthYearFormat.format(date ?: Date())
            } catch (e: Exception) {
                "unknown"
            }
        }

        val result = mutableListOf<NoteListItem>()
        groupedMap.forEach { (monthYear, notesInMonth) ->
            val displayMonth = try {
                val date = SimpleDateFormat("yyyy-MM", Locale.getDefault()).parse(monthYear)
                monthDisplayFormat.format(date ?: Date()).replaceFirstChar { it.uppercase() }
            } catch (e: Exception) {
                "unknown"
            }

            if (notesInMonth.isNotEmpty()) {
                result.add(NoteListItem.MonthHeader(month = displayMonth, key = monthYear))
                notesInMonth.forEach { note ->
                    result.add(NoteListItem.NoteItem(note))
                }
            }
        }

        return result
    }

    fun addTestNotes() {
        viewModelScope.launch {
            val testNotes = listOf(
                // 2025 - –û–∫—Ç—è–±—Ä—å
                Note(text = "–ö—É–ø–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã:\n‚Ä¢ –ú–æ–ª–æ–∫–æ\n‚Ä¢ –•–ª–µ–±\n‚Ä¢ –Ø–π—Ü–∞\n‚Ä¢ –°—ã—Ä\n‚Ä¢ –û–≤–æ—â–∏\n‚Ä¢ –§—Ä—É–∫—Ç—ã", date = "2025-10-05"),
                Note(text = "–í—Å—Ç—Ä–µ—á–∞ —Å –∫–ª–∏–µ–Ω—Ç–æ–º –≤ 15:00 –ø–æ –ø—Ä–æ–µ–∫—Ç—É. –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é –∏ –¥–æ–≥–æ–≤–æ—Ä.", date = "2025-10-04"),
                Note(text = "–ò–¥–µ–∏", date = "2025-10-03"),
                Note(text = "–ü–æ–∑–≤–æ–Ω–∏—Ç—å –≤—Ä–∞—á—É –∏ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏–µ–º. –ù–µ –∑–∞–±—ã—Ç—å –≤–∑—è—Ç—å –º–µ–¥–∏—Ü–∏–Ω—Å–∫—É—é –∫–∞—Ä—Ç—É –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–æ–≤.", date = "2025-10-02"),
                Note(text = "Kotlin: –∏–∑—É—á–∏—Ç—å Coroutines –∏ Flow. –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é –∏ –ø—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —Ä–µ–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–∞—Ö.", date = "2025-10-01"),

                // 2025 - –°–µ–Ω—Ç—è–±—Ä—å
                Note(text = "–û—Ç–ø—É—Å–∫ —Å 15 –ø–æ 30 —Å–µ–Ω—Ç—è–±—Ä—è! –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–µ–ª—å –≤ –°–æ—á–∏, –∫—É–ø–∏—Ç—å –±–∏–ª–µ—Ç—ã –Ω–∞ —Å–∞–º–æ–ª–µ—Ç, –æ—Ñ–æ—Ä–º–∏—Ç—å —Å—Ç—Ä–∞—Ö–æ–≤–∫—É.", date = "2025-09-28"),
                Note(text = "–°–ø–∏—Å–æ–∫ –∫–Ω–∏–≥:\n1. 1984 - –û—Ä—É—ç–ª–ª\n2. –ú–∞—Å—Ç–µ—Ä –∏ –ú–∞—Ä–≥–∞—Ä–∏—Ç–∞\n3. –ü—Ä–µ—Å—Ç—É–ø–ª–µ–Ω–∏–µ –∏ –Ω–∞–∫–∞–∑–∞–Ω–∏–µ\n4. –ì—Ä–∞—Ñ –ú–æ–Ω—Ç–µ-–ö—Ä–∏—Å—Ç–æ\n5. –í–µ–ª–∏–∫–∏–π –ì—ç—Ç—Å–±–∏", date = "2025-09-25"),
                Note(text = "üéÇ –ú–∞–º–∞", date = "2025-09-20"),
                Note(text = "–ü–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –Ω–∞ –Ω–µ–¥–µ–ª—é:\n–ü–Ω - –ì—Ä—É–¥—å, —Ç—Ä–∏—Ü–µ–ø—Å\n–°—Ä - –°–ø–∏–Ω–∞, –±–∏—Ü–µ–ø—Å\n–ü—Ç - –ù–æ–≥–∏, –ø–ª–µ—á–∏\n–í—Å - –ö–∞—Ä–¥–∏–æ", date = "2025-09-15"),
                Note(text = "–ö–æ–º–º—É–Ω–∞–ª–∫–∞ –¥–æ 10 —á–∏—Å–ª–∞", date = "2025-09-05"),
                Note(text = "–ü–∞—Ä–æ–ª—å –æ—Ç Wi-Fi –¥–ª—è –≥–æ—Å—Ç–µ–π: GuestNetwork2025", date = "2025-09-01"),

                // 2025 - –ê–≤–≥—É—Å—Ç
                Note(text = "–†–µ–º–æ–Ω—Ç:\n‚úì –ü–æ–∫—Ä–∞—Å–∏—Ç—å —Å—Ç–µ–Ω—ã –≤ –≥–æ—Å—Ç–∏–Ω–æ–π\n‚úì –ó–∞–º–µ–Ω–∏—Ç—å –ª—é—Å—Ç—Ä—É –≤ —Å–ø–∞–ª—å–Ω–µ\n‚óã –ö—É–ø–∏—Ç—å –Ω–æ–≤—ã–π –¥–∏–≤–∞–Ω\n‚óã –ü–æ—Å—Ç–µ–ª–∏—Ç—å –ª–∞–º–∏–Ω–∞—Ç\n‚óã –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä", date = "2025-08-28"),
                Note(text = "Android Dev Summit 20 –∞–≤–≥—É—Å—Ç–∞ –≤ 10:00. –¢–µ–º—ã: Jetpack Compose, Material 3, Performance optimization", date = "2025-08-15"),
                Note(text = "–ò–∑—É—á–∏—Ç—å –Ω–æ–≤—ã–µ —Ñ–∏—á–∏ Jetpack Compose", date = "2025-08-10"),
                Note(text = "–î–∞—á–∞: –∫—É–ø–∏—Ç—å —Å–µ–º–µ–Ω–∞, —É–¥–æ–±—Ä–µ–Ω–∏—è, –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã. –ü–æ—á–∏–Ω–∏—Ç—å –∑–∞–±–æ—Ä.", date = "2025-08-05"),

                // 2025 - –ò—é–ª—å
                Note(text = "–û—Ç—á–µ—Ç –ø–æ –ø—Ä–æ–µ–∫—Ç—É NotesApp:\n‚úì –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ MVVM - 100%\n‚úì UI –≤ Compose - 100%\n‚úì –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö Room - 100%\n‚óã –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ - 60%\n‚óã –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è - 40%\n–†–µ–ª–∏–∑: —Å–µ–Ω—Ç—è–±—Ä—å 2025", date = "2025-07-30"),
                Note(text = "–ú–æ—Ä–µ! üåä", date = "2025-07-20"),
                Note(text = "–ù–æ–≤—ã–π —Ä–µ—Ü–µ–ø—Ç –ø–∞—Å—Ç—ã –∫–∞—Ä–±–æ–Ω–∞—Ä–∞ —Å –±–µ–∫–æ–Ω–æ–º –∏ –ø–∞—Ä–º–µ–∑–∞–Ω–æ–º - –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –Ω–∞ –≤—ã—Ö–æ–¥–Ω—ã—Ö!", date = "2025-07-15"),
                Note(text = "Backup –≤—Å–µ—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ –Ω–∞ –≤–Ω–µ—à–Ω–∏–π –¥–∏—Å–∫", date = "2025-07-05"),

                // 2025 - –ò—é–Ω—å
                Note(text = "–ò–¥–µ—è —Å—Ç–∞—Ä—Ç–∞–ø–∞: AI-powered –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —É—á–µ—Ç–∞ –ª–∏—á–Ω—ã—Ö —Ñ–∏–Ω–∞–Ω—Å–æ–≤ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–µ–π —Ç—Ä–∞—Ç –∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ–º –±—é–¥–∂–µ—Ç–∞", date = "2025-06-25"),
                Note(text = "–ü–æ–¥–∞—Ä–æ–∫ –ê–ª–µ–∫—Å–µ—é –Ω–∞ –î–†", date = "2025-06-20"),
                Note(text = "–û–±–Ω–æ–≤–∏—Ç—å —Ä–µ–∑—é–º–µ: –¥–æ–±–∞–≤–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç—ã, –Ω–∞–≤—ã–∫–∏ Kotlin, Compose, –æ–±–Ω–æ–≤–∏—Ç—å LinkedIn –ø—Ä–æ—Ñ–∏–ª—å", date = "2025-06-10"),
                Note(text = "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π: –ø—Ä–∞–∫—Ç–∏–∫–∞ speaking –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –ø–æ 30 –º–∏–Ω—É—Ç", date = "2025-06-05"),

                // 2025 - –ú–∞–π
                Note(text = "–í–µ—Å–µ–Ω–Ω—è—è –≥–µ–Ω–µ—Ä–∞–ª—å–Ω–∞—è —É–±–æ—Ä–∫–∞:\n‚ñ° –ü–æ–º—ã—Ç—å –≤—Å–µ –æ–∫–Ω–∞\n‚ñ° –†–∞–∑–æ–±—Ä–∞—Ç—å –≥–∞—Ä–¥–µ—Ä–æ–±\n‚ñ° –ü–æ—á–∏—Å—Ç–∏—Ç—å –±–∞–ª–∫–æ–Ω\n‚ñ° –í—ã–±—Ä–æ—Å–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –≤–µ—â–∏\n‚ñ° –ü–æ—Å—Ç–∏—Ä–∞—Ç—å —à—Ç–æ—Ä—ã", date = "2025-05-28"),
                Note(text = "–ü–æ—Å–∞–¥–∏—Ç—å –Ω–∞ –¥–∞—á–µ: –ø–æ–º–∏–¥–æ—Ä—ã, –æ–≥—É—Ä—Ü—ã, –ø–µ—Ä–µ—Ü, –∑–µ–ª–µ–Ω—å, —Ü–≤–µ—Ç—ã", date = "2025-05-15"),
                Note(text = "–í–∞–∂–Ω–∞—è –≤—Å—Ç—Ä–µ—á–∞ —Å –∏–Ω–≤–µ—Å—Ç–æ—Ä–∞–º–∏! –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –ø–∏—Ç—á-–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é –∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—É—é –º–æ–¥–µ–ª—å.", date = "2025-05-05"),

                // 2024 - –î–µ–∫–∞–±—Ä—å
                Note(text = "–ù–æ–≤—ã–π –≥–æ–¥! –ö—É–ø–∏—Ç—å –ø–æ–¥–∞—Ä–∫–∏ –≤—Å–µ–º, —Å–æ—Å—Ç–∞–≤–∏—Ç—å –º–µ–Ω—é, —É–∫—Ä–∞—Å–∏—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä—É", date = "2024-12-28"),
                Note(text = "–ü–æ–¥–≤–µ—Å—Ç–∏ –∏—Ç–æ–≥–∏ –≥–æ–¥–∞:\n- –í—ã—É—á–∏–ª Kotlin ‚úì\n- –°–æ–∑–¥–∞–ª 3 –ø—Ä–æ–µ–∫—Ç–∞ ‚úì\n- –ù–∞—à–µ–ª —Ä–∞–±–æ—Ç—É ‚úì\n- –ù–∞—á–∞–ª –∑–∞–Ω–∏–º–∞—Ç—å—Å—è —Å–ø–æ—Ä—Ç–æ–º ‚úì", date = "2024-12-20"),
                Note(text = "–ó–∏–º–Ω–∏–µ —à–∏–Ω—ã", date = "2024-12-10"),

                // 2024 - –û–∫—Ç—è–±—Ä—å
                Note(text = "–°—Ç–∞—Ä–∞—è –∑–∞–º–µ—Ç–∫–∞: –ø–µ—Ä–µ–µ–∑–¥ –≤ –Ω–æ–≤—É—é –∫–≤–∞—Ä—Ç–∏—Ä—É –∑–∞–≤–µ—Ä—à–µ–Ω. –û—Å—Ç–∞–ª–æ—Å—å —Ç–æ–ª—å–∫–æ —Ä–∞—Å—Å—Ç–∞–≤–∏—Ç—å –º–µ–±–µ–ª—å.", date = "2024-10-15"),
                Note(text = "–û–∫—Ç—è–±—Ä—å 2024: –Ω–∞—á–∞–ª –∏–∑—É—á–∞—Ç—å Android —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É", date = "2024-10-10"),
                Note(text = "–ü–µ—Ä–≤–∞—è –∑–∞–º–µ—Ç–∫–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏!", date = "2024-10-01"),

                // 2024 - –ò—é–ª—å
                Note(text = "–û—Ç–ø—É—Å–∫ –≤ –¢—É—Ä—Ü–∏–∏ –±—ã–ª –Ω–µ–≤–µ—Ä–æ—è—Ç–Ω—ã–º! –ú–æ—Ä–µ, —Å–æ–ª–Ω—Ü–µ, –æ—Ç–ª–∏—á–Ω–∞—è –∫—É—Ö–Ω—è. –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤–µ—Ä–Ω—É—Ç—å—Å—è.", date = "2024-07-25"),
                Note(text = "–ó–∞–∫–æ–Ω—á–∏–ª –æ–Ω–ª–∞–π–Ω-–∫—É—Ä—Å –ø–æ Kotlin. –ü–æ–ª—É—á–∏–ª —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç!", date = "2024-07-10"),

                // 2023 - –î–µ–∫–∞–±—Ä—å
                Note(text = "–¶–µ–ª–∏ –Ω–∞ 2024:\n1. –í—ã—É—á–∏—Ç—å Kotlin –∏ Android\n2. –°–æ–∑–¥–∞—Ç—å —Å–≤–æ—ë –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ\n3. –ù–∞–π—Ç–∏ —Ä–∞–±–æ—Ç—É —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º\n4. –ù–∞—á–∞—Ç—å –∑–¥–æ—Ä–æ–≤—ã–π –æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏\n5. –ß–∏—Ç–∞—Ç—å –º–∏–Ω–∏–º—É–º 1 –∫–Ω–∏–≥—É –≤ –º–µ—Å—è—Ü", date = "2023-12-31"),
                Note(text = "–†–æ–∂–¥–µ—Å—Ç–≤–æ —Å —Å–µ–º—å–µ–π", date = "2023-12-25"),

                // 2023 - –ò—é–Ω—å
                Note(text = "–†–µ—à–∏–ª —Å—Ç–∞—Ç—å Android —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º. –ù–∞—á–∏–Ω–∞—é —Å –æ—Å–Ω–æ–≤ Java.", date = "2023-06-15"),
                Note(text = "–õ–µ—Ç–Ω–∏–µ –∫–∞–Ω–∏–∫—É–ª—ã", date = "2023-06-01"),

                // 2023 - –Ø–Ω–≤–∞—Ä—å
                Note(text = "–ù–æ–≤—ã–π –≥–æ–¥, –Ω–æ–≤–∞—è –∂–∏–∑–Ω—å! –í—Ä–µ–º—è –ø–µ—Ä–µ–º–µ–Ω.", date = "2023-01-01")
            )

            testNotes.forEach { note ->
                repository.upsertNote(note)
            }

            loadNotes()
        }
    }

    fun clearAllNotes() {
        viewModelScope.launch {
            val currentNotes = repository.getNotes()

            currentNotes.item.forEach { note ->
                repository.deleteNote(note.id)
            }
            loadNotes()
        }
    }


}